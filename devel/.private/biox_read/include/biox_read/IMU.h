// Generated by gencpp from file biox_read/IMU.msg
// DO NOT EDIT!


#ifndef BIOX_READ_MESSAGE_IMU_H
#define BIOX_READ_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace biox_read
{
template <class ContainerAllocator>
struct IMU_
{
  typedef IMU_<ContainerAllocator> Type;

  IMU_()
    : gravity()
    , gyro()
    , linear_acceleration()
    , euler()
    , Quaternion()  {
    }
  IMU_(const ContainerAllocator& _alloc)
    : gravity(_alloc)
    , gyro(_alloc)
    , linear_acceleration(_alloc)
    , euler(_alloc)
    , Quaternion(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gravity_type;
  _gravity_type gravity;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _euler_type;
  _euler_type euler;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _Quaternion_type;
  _Quaternion_type Quaternion;





  typedef boost::shared_ptr< ::biox_read::IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::biox_read::IMU_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_

typedef ::biox_read::IMU_<std::allocator<void> > IMU;

typedef boost::shared_ptr< ::biox_read::IMU > IMUPtr;
typedef boost::shared_ptr< ::biox_read::IMU const> IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::biox_read::IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::biox_read::IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::biox_read::IMU_<ContainerAllocator1> & lhs, const ::biox_read::IMU_<ContainerAllocator2> & rhs)
{
  return lhs.gravity == rhs.gravity &&
    lhs.gyro == rhs.gyro &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.euler == rhs.euler &&
    lhs.Quaternion == rhs.Quaternion;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::biox_read::IMU_<ContainerAllocator1> & lhs, const ::biox_read::IMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace biox_read

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::biox_read::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::biox_read::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::biox_read::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::biox_read::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::biox_read::IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::biox_read::IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::biox_read::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d7d0d3dc06e3fee1ce2f3a62d5b110c";
  }

  static const char* value(const ::biox_read::IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d7d0d3dc06e3feeULL;
  static const uint64_t static_value2 = 0x1ce2f3a62d5b110cULL;
};

template<class ContainerAllocator>
struct DataType< ::biox_read::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "biox_read/IMU";
  }

  static const char* value(const ::biox_read::IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::biox_read::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point gravity\n"
"geometry_msgs/Point gyro\n"
"geometry_msgs/Point linear_acceleration\n"
"geometry_msgs/Point euler\n"
"geometry_msgs/Quaternion Quaternion\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::biox_read::IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::biox_read::IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gravity);
      stream.next(m.gyro);
      stream.next(m.linear_acceleration);
      stream.next(m.euler);
      stream.next(m.Quaternion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::biox_read::IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::biox_read::IMU_<ContainerAllocator>& v)
  {
    s << indent << "gravity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gravity);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "euler: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.euler);
    s << indent << "Quaternion: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.Quaternion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIOX_READ_MESSAGE_IMU_H
